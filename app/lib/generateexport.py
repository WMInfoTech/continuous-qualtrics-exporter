__author__ = 'jwpully'
import requests
import json

def generateexport(dataCenter, survey_id, bearerToken, format, startDate=None, endDate=None):
    # Attempt to export responses

    try:
        baseUrl = "https://{0}.qualtrics.com/API/v3/surveys/{1}/export-responses".format(dataCenter, survey_id)
        print(baseUrl)

        headers = {
            "authorization": "bearer " + bearerToken,
             "Content-Type": "application/json"
            }

        json_string = {"format": format}

        if startDate is not None:
            json_string['startDate'] = startDate

        if endDate is not None:
            json_string['endDate'] = endDate

        response = requests.request("POST", baseUrl, json=json_string, headers=headers)
        # print(response.text)
        return json.loads(response.text)['result']['progressId']

    except Exception as e:
        print("An error occurred while generating the Qualtrics survey export")
        print(str(e))
        exit(1)


if __name__ == "__main__":
    import argparse
    from configmanager import settings

    try:
        settings = settings()

        parser = argparse.ArgumentParser()
        parser.add_argument("-t", "--bearerToken", help="Token generated from gettoken", default=None)
        args = parser.parse_args()
        if args.bearerToken is not None:
            progressId = generateexport(settings['QUALTRICS_DATACENTER'], settings['QUALTRICS_SURVEYID'], args.bearerToken, settings['QUALTRICS_EXPORTFORMAT'], "2020-06-11T00:00:00Z", "2020-06-11T23:59:59Z")
            print("Next command, execute:")
            print("python exportprogress.py --bearerToken " + args.bearerToken + " --progressId " + progressId)
        else:
            print("A Bearer token is required on the command line")
            print("python generateexport.py --bearerToken XXXXXXXXXX")
            print("This can be generated by running gettoken.py")
    except Exception as e:
        print("An error occurred while generating the export file")
        print(str(e))